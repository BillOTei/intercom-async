package models.intercom.bulk

import models.intercom.User
import play.api.libs.json.{JsObject, JsValue, Json, Writes}

/**
  * The intercom bulk obj for bulk updates
  *
  * @param items: the data to update
  * @param optJobId: the job id generated by intercom, if supplied, data is appended to the current bulk
  */
case class Bulk(
               items: List[Item],
               optJobId: Option[String] = None
               )

object Bulk {

  implicit val jsonWrites: Writes[Bulk] = new Writes[Bulk] {
    override def writes(b: Bulk): JsValue = Json.obj(
      "items" -> b.items
    ) ++ {
      if (b.optJobId.isDefined) Json.obj("job" -> Json.obj("id" -> b.optJobId.get))
      else Json.obj()
    }
  }

  /**
    * Returns the Bulk obj for company user link deletion
    * @param placeId: the place/company id
    * @param users: the list of users to delete link from
    * @return
    */
  def getForCompanyUserDeletion(placeId: Long, users: List[JsObject]): Bulk = Bulk(
    users flatMap {
      user => (user \ "email").asOpt[String] map {
        email => Item(
          "post",
          "user",
          {
            Json.obj(
              "email" -> email,
              "companies" -> Json.arr(
                Json.obj(
                  "id" -> placeId.toString,
                  "remove" -> true
                )
              )
            ) ++ {
              if ((user \ "user_id").asOpt[String].isDefined) Json.obj("user_id" -> (user \ "user_id").as[String])
              else Json.obj()
            }
          }
        )
      }
    }
  )

  /**
    * Gets a Bulk obj for user_id update on Intercom side
    * @param users: the list of intercom users
    * @return
    */
  def getForUserIdUpdate(users: List[User]) = Bulk(
    users map {
      user => Item(
        "post",
        "user",
        Json.obj(
          "id" -> user.id,
          "email" -> user.email
        ) ++ {
          if (user.optUserId.isDefined) Json.obj("user_id" -> user.optUserId.get)
          else Json.obj()
        }
      )
    }
  )

  /**
    * Gets a Bulk for a full update of user including the companies
    * @param placeUsers: the place user data
    * @return
    */
  def getForFullUserUpdate(placeUsers: List[JsObject]) = Bulk(
    placeUsers map {
      pu => Item(
        "post",
        "user",
        pu
      )
    }
  )

}